<pre>
  BIP: 141
  레이어: 컨센서스 (소프트 포크)
  제목: 세그윗 (컨센서스 레이어)
  저자: Eric Lombrozo <elombrozo@gmail.com>
          Johnson Lau <jl2012@xbt.hk>
          Pieter Wuille <pieter.wuille@gmail.com>
  코멘트-요약: No comments yet.
  코멘트-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0141
  상태: Final
  타입: Standards Track
  생성일: 2015-12-21
  라이센스: PD
</pre>

==Abstract==

이 BIP는 트랜잭션 머클 트리와는 별도로 블록에 커밋된 "증인(witness)"이라는 새로운 구조를 정의합니다. 이 구조에는 트랜잭션 유효성을 확인하는 데는 필요하지만 트랜잭션의 영향을 결정하는 데는 필요하지 않은 데이터가 포함되어 있습니다. 특히 스크립트와 서명이 이 새로운 구조로 이동됩니다.

증인은 코인베이스 트랜잭션을 통해 블록의 기존 머클 루트에 중첩된(nested) 트리에 커밋되며, 이는 이 BIP 소프트포크가 호환되도록 하기 위한 것입니다. 향후 하드 포크는 이 트리를 자체 분기에 배치할 수 있습니다.

==Motivation==

트랜잭션의 전체 효과는 출력 소비(지출)와 새로운 출력 생성에 의해 결정됩니다. 다른 트랜잭션 데이터, 특히 서명은 블록체인 상태를 검증하는 데만 필요하며, 블록체인 상태를 결정하는 데는 필요하지 않습니다.

트랜잭션 머클 트리에 커밋된 트랜잭션 구조에서 이러한 데이터를 제거하면 몇 가지 문제가 해결됩니다:

# '''의도하지 않은 가변성(malleability)이 불가능해집니다'''. 서명 데이터는 더 이상 트랜잭션 해시의 일부가 아니므로, 트랜잭션 서명 방식에 대한 변경은 더 이상 트랜잭션 식별과 관련이 없습니다. 트랜잭션 가변성에 대한 해결책으로서, 이는 표준 서명 방식([https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki BIP62])보다 우수합니다:
#* 모든 입력이 서명되어 있는 한(하나 이상의 CHECKSIG 또는 CHECKMULTISIG 연산으로) 모든 유형의 스크립트에 대해 비자발적 트랜잭션 가변성을 방지합니다
#* m-of-n CHECKMULTISIG 스크립트의 경우, 트랜잭션은 m명의 개인 키 보유자의 동의가 있어야만 가변 가능합니다(BIP62의 경우 개인 키 보유자 1명만 동의하는 것과는 대조)
#* 알려지지 않은(Unknown) ECDSA 서명 가변성으로 인한 비자발적인 거래 가변성을 방지합니다
#* 라이트닝 네트워크와 같은 오프체인 프로토콜의 중요한 특징인 거래 상대방 위험 없이 언컨펌된 거래 의존성 체인을 생성할 수 있습니다
# '''서명 데이터 전송은 선택 사항이 됩니다'''. 피어가 단지 트랜잭션의 존재를 확인하는 대신 트랜잭션의 유효성을 확인하려는 경우에만 필요합니다. 이렇게 하면 SPV 증명의 크기가 줄어들고 동일한 대역폭을 사용하여 더 많은 트랜잭션을 다운로드할 수 있으므로 잠재적으로 SPV 클라이언트의 개인 정보 보호가 향상될 수 있습니다.
# 트랜잭션 데이터의 일부를 현재 프로토콜에 알려지지 않은(Unknown) 구조로 이동하여'''소프트 포크를 통해 일부 제약 조건을 우회할 수 있습니다'''. 예를들어:
#* 블록 크기를 계산할 때 증인의 크기를 무시 / 할인하여 블록 크기를 어느 정도 효과적으로 늘릴 수 있습니다
#* 최대 데이터 푸시 크기(520바이트) 또는 시그옵스 제한과 같은 하드 코딩된 상수는 값을 바꾸거나 제거될 수 있습니다
#* 기존 스크립트 시맨틱의 제한 없이 새로운 스크립트 시스템을 도입할 수 있습니다. 예를 들어, 트랜잭션 서명 검증을 위한 새로운 트랜잭션 다이제스트 알고리즘은 [https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki BIP143]에 설명되어 있습니다

==Specification==

=== Transaction ID ===

새로운 데이터 구조 <code>witness</code>가 정의됩니다. 각 트랜잭션에는 2개의 ID가 있습니다.

<code>txid</code>의 정의는 기존 직렬화 형식의 이중 SHA256으로 변경되지 않습니다:
  
  [nVersion][txins][txouts][nLockTime]
  
새로운 <code>wtxid</code>가 정의됩니다: 증인 데이터와 함께 새 직렬화의 이중 SHA256입니다:
  
  [nVersion][marker][flag][txins][txouts][witness][nLockTime]
  
<code>nVersion</code>, <code>txins</code>, <code>txouts</code>, 및 <code>nLockTime</code>의 형식은 기존 직렬화와 동일합니다.

<code>marker</code>는 반드시(MUST) 1바이트 값 0(0x00)이어야 합니다: <code>0x00</code>.

<code>flag</code>는 1바이트의 0이 아닌 값이어야 합니다(MUST). 현재 <code>0x01</code>을 사용해야 합니다(MUST).

<code>witness</code>은 트랜잭션의 모든 증인 필드의 직렬화입니다. 각 txin은 하나의 증인 필드와 연결됩니다.증인 필드는 txin의 스택 항목 수를 나타내는 <code>var_int</code>로 시작합니다. 그 다음에는 스택 항목이 이어지며, 각 항목은 길이를 나타내는 <code>var_int</code> 로 시작합니다. 증인 데이터는 스크립트가 아닙니다(NOT).

비-증인 프로그램(이하 정의됨) txin은 <code>0x00</code>으로 표시되는 빈 증인 필드와 연결되어야 합니다. 모든 txin이 감시 프로그램이 아닌 경우 트랜잭션의 <code>wtxid</code>는 해당 <code>txid</code>와 동일합니다.

=== Commitment structure ===

새로운 블록 규칙은 <code>wtxid</code>에 대한 commitment가 필요합니다. 코인베이스 트랜잭션의 <code>wtxid</code>는 <code>0x0000....0000</code>으로 가정합니다.

<code>witness root hash</code> 는 블록헤더 <code>hashMerkleRoot</code>와 유사한 방식으로 모든 <code>wtxid</code>를 잎으로 사용하여 계산됩니다.

commitment는 코인베이스 트랜잭션의 <code>scriptPubKey</code>에 기록됩니다. 이 commitment는 38 bytes 이상이어야 하며, 첫 6 바이트는 <code>0x6a24aa21a9ed</code>여야 합니다:
  
   1-byte - OP_RETURN (0x6a)
   1-byte - 다음 36 바이트를 푸시하시오 (0x24)
   4-byte - Commitment 헤더 (0xaa21a9ed)
  32-byte - Commitment 해시: Double-SHA256(witness root hash|witness reserved value)
  
  39th byte onwards: 컨센서스 의미가 없는 선택적 데이터
  
그리고 코인베이스의 인풋의 증인은 <code>witness reserved value</code>을 위한 단일 32 바이트 배열로 구성되어야만 합니다.

패턴과 일치하는 <code>scriptPubKey</code>가 둘 이상 있는 경우, 출력 인덱스가 가장 높은 <code>scriptPubKey</code>가 commitment로 간주됩니다..

블록의 모든 트랜잭션에 증인 데이터가 없는 경우, commitment는 선택 사항입니다.

=== Witness program ===

1바이트 푸시 오피코드(0 ~ 16 바이트)에 이어 2~40 바이트 사이의 데이터 푸시로 구성된 <code>scriptPubKey</code> (또는 BIP26/P2SH에 정의된 <code>redeemScript</code>)는 새로운 특별한 의미를 갖습니다. 첫 번째 푸시 값을 "버전 바이트"라고 합니다. 다음에 푸시된 바이트 벡터를 "증인 프로그램"이라고 합니다.

증인 유효성 검사 로직이 트리거되는 경우는 두 가지입니다. 각 경우에 따라 증인 버전 바이트와 프로그램의 위치, scriptSig의 형태가 결정됩니다:
# 정확히 버전 바이트 푸시와 증인 프로그램 푸시인 <code>scriptPubKey</code>에 의해 트리거 되었을 때, scriptSig 는 반드시 비어있어야 하며 그렇지 않으면 유효성 검사가 실패합니다. (''"네이티브 증인 프로그램(native witness program)"'')
# <code>scriptPubKey</code> 가 P2SH 스크립트이고 <code>scriptSig</code>에 푸시된 BIP16 <code>redeemScript</code>가 버전 바이트 푸시와 증인 프로그램 푸시인 스크립트로 트리거 되었을 때, <code>scriptSig</code>는 반드시 BIP16 <code>redeemScript</code>의 푸시여야 하며 그렇지 않으면 유효성 검사가 실패합니다. (''"P2SH 증인 프로그램(P2SH witness program)"'')

버전 바이트가 0이고 증인 프로그램이 20바이트인 경우:
* P2WPKH(pay-to-witness-public-key-hash) 프로그램으로 해석됩니다.
* 증인은 정확히 2개의 항목(각각 520바이트 이하)으로 구성되어야 합니다. 첫 번째는 서명이고 두 번째는 공개 키입니다.
* 공개 키의 HASH160은 20바이트 증인 프로그램과 일치해야 합니다.
* 일반 스크립트 평가 후, 서명은 CHECKSIG 작업을 통해 공개 키에 대해 검증됩니다. 검증 결과 스택에서 단일 TRUE가 나와야 합니다.

버전 바이트가 0이고 증인 프로그램이 32바이트인 경우:
* P2WSH(Pay-to-Witness-Script-Hash) 프로그램으로 해석됩니다.
* 증인은 스크립트에 공급할 입력 스택과 직렬화된 스크립트(<code>witnessScript</code>)로 구성되어야만 합니다.
* 초기 증인 스택에서 <code>witnessScript</code> (≤ 10,000 bytes)가 팝업됩니다(popped off). <code>witnessScript</code>의 SHA256은 32바이트 증인 프로그램과 일치해야만 합니다.
* <code>witnessScript</code>는 역직렬화되고 일만 스크립트 평가 후 나머지 증인 스택(각 스택 항목당 250바이트 이하)으로 실행됩니다.
* 스크립트는 실패해서는 안 되며 스택에 정확히 하나의 TRUE가 발생해야 합니다.

버전 바이트가 0이지만 감시 프로그램이 20바이트도 아니고 32바이트도 아닌 경우 스크립트가 실패해야 합니다.<ref>예를 들어, OP_0 뒤에 40바이트의 0이 아닌 데이터 푸시가 뒤따르는 scriptPubKey는 잘못된 프로그램 크기로 인해 실패합니다. 그러나 OP_0에 이어 41바이트의 0이 아닌 데이터 푸시가 뒤따르는 scriptPubKey는 감시 프로그램으로 간주되지 않으므로 통과합니다.</ref>

버전 바이트가 1~16인 경우, 증인 프로그램 또는 증인 스택에 대한 추가 해석이 발생하지 않으며, 증인 스택에 대한 크기 제한이 없습니다. 이 버전은 향후 확장을 위해 예약되어 있습니다.<ref>이전 버전과의 호환성을 위해 0에서 16까지의 모든 버전 바이트에 대해 감시 프로그램의 <code>CastToBool</code>값이 0이면 스크립트가 실패해야만 합니다. 그러나 이와 같은 해시를 갖는 것은 해시 함수에 대한 성공적인 사전 이미지 공격이며 위험은 무시할 수 있는 수준입니다.</ref>

=== Other consensus critical limits ===

==== Block size ====

블록은 현재 총 크기가 1,000,000바이트(1MB)로 제한되어 있습니다. 이 제한을 다음과 같이 변경합니다:

''블록 무게(Block weight)''는 ''베이스 사이즈(Base size)'' * 3 + ''총 사이즈(Total size)''으로 정의된다. (근거<ref>1MB 기본 데이터와 3MB 증인 데이터와 같은 두 개의 개별 제한 대신 단일 합성 조건(single composite constraint)을 사용하는 이유: 두 개의 개별적인 제한을 사용하면 채굴과 수수료 추정이 거의 불가능해집니다. 채굴자는 두 가지 제약 조건이 주어졌을 때 수수료를 최대화하는 트랜잭션 집합을 찾기 위해 복잡한 비선형 최적화 문제를 풀어야 하며, 지갑은 채굴자가 트랜잭션이 포함된 블록을 생성하려고 할 때 두 조건 중 어떤 조건이 가장 큰 제약을 받는지에 따라 지불해야 할 금액을 알 수 없게 됩니다. 이러한 접근 방식의 또 다른 문제는 프리로딩입니다(freeloading). 트랜잭션 세트가 기본 데이터 1MB 제약에 도달하면, 최소한의 수수료만 인상하여 최대 3MB의 추가 데이터를 증인에 추가할 수 있습니다. 이 경우 추가 증인 공간에 대한 한계 비용은 사실상 0이 됩니다.</ref>)

''베이스 사이즈(Base size)''는 업그레이드되지 않은 노드에서 볼 때 증인 관련 데이터가 없는 기존 트랜잭션 직렬화의 블록 사이즈(바이트)입니다.

''총 사이즈(Total size)''는 베이스 데이터와 증인 데이터를 포함하여 [[bip-0144.mediawiki|BIP144]]에 설명된 대로 직렬화된 트랜잭션이 포함된 바이트 단위의 블록 사이즈입니다.

새로운 규칙: ''블록 무게(block weight)'' ≤ 4,000,000.

==== Sigops ====

현재 블록당 Sigops는 20,000개로 제한되어 있습니다. 이 제한을 다음과 같이 변경합니다:

현재 공개키 스크립트, 서명 스크립트 및 P2SH 확인 스크립트의 Sigops는 이전 값의 4배로 계산됩니다. Sigops 제한도 마찬가지로 ≤ 80,000으로 4배 증가합니다.

각 P2WPKH 입력은 1 sigop으로 계산됩니다. 또한 P2WSH <code>witnessScript</code> 내의 오피코드들은 P2SH <code>redeemScript</code> 내에서 이전과 동일하게 계산됩니다.
즉, CHECKSIG는 1 sigop으로만 계산됩니다. 앞에 OP_1 ~ OP_16이 오면 CHECKMULTISIG는 각각 1~16 sigops으로 계산되고, 그렇지 않으면 20 sigops으로 계산됩니다. 이 규칙은 네이티브 증인 프로그램과 P2SH 증인 프로그램 모두에 적용됩니다.

=== Additional definitions ===

다음 정의는 합의 제한에 사용되지는 않지만, 위에 소개된 용어와 일관된 언어를 제공하기 위해 제안된 것입니다.

==== Transaction size calculations ====

''트랜잭션 무게(Transaction weight)''는 ''베이스 트랜잭션 사이즈(Base transaction size)'' * 3 + ''총 트랜잭션 사이즈(Total transaction size)'' 로 정의됩니다(즉, ''베이스 사이즈(Base size)''와 ''총 사이즈(Total size)''에서 ''블록 무게(Block weight)''를 계산하는 것과 동일한 방식).

''가상 트랜잭션 사이즈(Virtual transaction size)''는 ''트랜잭션 무게(Transaction weight)'' / 4 (다음 정수로 반올림) 로 정의됩니다.

''베이스 트랜잭션 사이즈(Base transaction size)''는 증인 데이터가 제거된 상태로 직렬화된 트랜잭션의 크기입니다.

''총 트랜잭션 사이즈(Total transaction size)'' 는 기본 데이터와 증인 데이터를 포함하여 [[bip-0144.mediawiki|BIP144]]에 설명된 대로 직렬화된 바이트 단위의 트랜잭션 크기입니다.

=== New script semantics ===

P2WPKH 및 P2WSH의 스크립트 언어는 세그윗 이전 스크립트와 매우 유사해 보이지만 몇 가지 주목할 만한 차이점이 있습니다. 사용자는 세그윗 이전 시스템에서 지출 가능한 스크립트를 P2WPKH 또는 P2WSH 스크립트로도 지출할 수 있다고 가정해서는 안 됩니다(MUST NOT). 개발자는 프로덕션 네트워크에 대규모로 배포하기 전에 기본 릴레이 정책을 켠 상태에서 테스트넷에서 스크립트를 테스트하고, 메인넷에서 BIP141이 활성화된 후 적은 금액으로 테스트해야 합니다.

합의 수준에서의 주요 차이점은 버전 0 증인 프로그램에서 서명 검증을 위한 새로운 트랜잭션 다이제스트 알고리즘이고 [https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki BIP143]에 설명되어 있습니다. 

세 가지 릴레이 및 마이닝 정책도 참조 구현 버전 0.13.1에서 세그윗 첫 번째 릴리즈에 포함되어 있습니다. 이러한 정책에 기반한 소프트포크는 가까운 시일 내에 제안될 가능성이 높습니다. 잠재적인 소프트포크에서 트랜잭션 확인의 무기한 지연과 영구적인 자금 손실을 피하기 위해 사용자는 새로운 시맨틱을 주의 깊게 관찰해야만 합니다:

# P2WPKH 및 P2WSH에서는 압축된 공개 키만 허용됩니다. (See [https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki#Restrictions_on_public_key_type BIP143])
# P2WSH의 OP_IF/NOTIF 인수는 최소값이어야 합니다.<ref>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013014.html</ref>
# OP_CHECKSIG 또는 OP_CHECKMULTISIG가 실패한 경우 서명은 널 벡터(null vector(s))여야 합니다. (세그윗 이전 스크립트와 P2WSH 모두에 대해. See [https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki BIP146])

== Examples ==

=== P2WPKH ===

다음 예는 버전 0 P2WPKH(pay-to-witness-public-key-hash)입니다:

    witness:      <signature> <pubkey>
    scriptSig:    (empty)
    scriptPubKey: 0 <20-byte-key-hash>
                  (0x0014{20-byte-key-hash})

scriptPubKey의 '0'은 다음 푸시가 버전 0 증인 프로그램임을 나타냅니다. 증인 프로그램의 길이는 P2WPKH 유형임을 나타냅니다. 증인은 정확히 2개의 항목으로 구성되어야 합니다. 증인에 있는 pubkey의 HASH160은 증인 프로그램과 일치해야 합니다.

서명은 다음과 같이 검증됩니다.

    <signature> <pubkey> CHECKSIG

기존 P2PKH 출력과 비교했을 때, P2WPKH에 해당하는 것은 scriptPubKey에서 3바이트를 덜 차지하고 서명과 공개키를 scriptSig에서 증인으로 옮깁니다.

=== P2WPKH nested in BIP16 P2SH ===

다음 예시는 동일한 P2WPKH이지만 BIP16 P2SH 출력에 중첩된(nested) 예시입니다.

    witness:      <signature> <pubkey>
    scriptSig:    <0 <20-byte-key-hash>>
                  (0x160014{20-byte-key-hash})
    scriptPubKey: HASH160 <20-byte-script-hash> EQUAL
                  (0xA914{20-byte-script-hash}87)

scriptSig의 유일한 항목은 HASH160으로 해시되고, scriptPubKey의 20바이트 스크립트 해시와 비교되어 다음과 같이 해석됩니다:

    0 <20-byte-key-hash>

그런 다음 이전 예제에서 설명한 대로 공개 키와 서명을 확인합니다.

이전 예시와 비교하면 scriptPubKey는 1바이트 더 크고 scriptSig는 23바이트 더 큽니다. 중첩된(nested) witness 프로그램은 효율성은 떨어지지만, 결제 주소가 완전히 투명하고 버전 0.6.0 이후 모든 비트코인 참조 클라이언트에서 이전 버전과 호환됩니다.

=== P2WSH ===

다음 예는 1-of-2 다중 서명 버전 0 P2WSH(pay-to-witness-script-hash)입니다.

    witness:      0 <signature1> <1 <pubkey1> <pubkey2> 2 CHECKMULTISIG>
    scriptSig:    (empty)
    scriptPubKey: 0 <32-byte-hash>
                  (0x0020{32-byte-hash})

scriptPubKey의 '0'은 다음 푸시가 버전 0 증인 프로그램임을 나타냅니다. 증인 프로그램의 길이는 P2WSH 유형임을 나타냅니다. 증인("witnessScript")의 마지막 항목은 팝업되고(popped off) SHA256으로 해시된 다음 scriptPubKey의 32바이트 해시와 비교한 후 역직렬화합니다:

    1 <pubkey1> <pubkey2> 2 CHECKMULTISIG

스크립트는 증인의 나머지 데이터로 실행됩니다:

    0 <signature1> 1 <pubkey1> <pubkey2> 2 CHECKMULTISIG

P2WSH는 520바이트 푸시 제한을 우회하므로 최대 10,000바이트의 스크립트 크기를 허용합니다.

scriptPubKey는 BIP16 P2SH의 23바이트와 달리 34바이트를 차지합니다. 2<sup>80</sup>개의 작업이 더 이상 불가능하지 않기 때문에 크기가 증가하면 충돌 공격에 대한 보안이 향상됩니다 (2015년 말까지 비트코인 생성 이후 비트코인 채굴에서 계산된 해시는 2<sup>84</sup> 개입니다). 지출 스크립트는 동등한 BIP16 P2SH 출력에 대한 스크립트와 동일하지만 증인으로 이동됩니다.

=== P2WSH nested in BIP16 P2SH ===

다음 예시는 동일한 1-of-2 다중 서명 P2WSH 스크립트이지만 BIP16 P2SH 출력에 중첩된 예시입니다.

    witness:      0 <signature1> <1 <pubkey1> <pubkey2> 2 CHECKMULTISIG>
    scriptSig:    <0 <32-byte-hash>>
                  (0x220020{32-byte-hash})
    scriptPubKey: HASH160 <20-byte-hash> EQUAL
                  (0xA914{20-byte-hash}87)

scriptSig의 유일한 항목은 HASH160으로 해시되고, scriptPubKey의 20바이트 해시와 비교되어 다음과 같이 해석됩니다:

    0 <32-byte-hash>

그런 다음 이전 예제에서 설명한 대로 P2WSH witnessScript가 실행됩니다.

이전 예제와 비교하면, scriptPubKey는 11바이트 더 작지만(보안이 약해짐), witness는 동일합니다. 그러나 scriptSig에는 35바이트가 필요합니다.

=== Extensible commitment structure ===

코인베이스 트랜잭션의 새로운 commitment는 <code>witness root hash</code> 및 <code>witness reserved value</code>의 해시입니다. <code>witness reserved value</code>은 현재 합의된 의미가 없지만, 향후 소프트포크를 위한 새로운 commitment 값을 허용할 예정입니다. 예를 들어, 향후 합의에 중요한 새로운 commitment가 필요한 경우 코인베이스의 commitment가 됩니다:

  Double-SHA256(Witness root hash|Hash(new commitment|witness reserved value))

이전 버전과의 호환성을 위해 <code>Hash(new commitment|witness reserved value)</code>는 코인베이스 증인으로 이동하고, <code>witness reserved value</code>는 향후 소프트포크에서 지정한 다른 위치에 기록될 것입니다. 이러한 방식으로 새로운 commitment를 얼마든지 추가할 수 있습니다.

병합 채굴(merge-mining)과 같이 비트코인에 합의에 중요하지 않은 commitment는 비트코인 합의 프로토콜의 업그레이드 기능을 보존하기 위해 <code>witness reserved value</code>을 사용해서는 안 됩니다(MUST NOT).

commitment에 따른 선택적 데이터 공간(optional data space)은 향후 소프트포크의 메타데이터를 위한 여유 공간을 남겨두며, 다른 용도로 사용해서는 안 됩니다(MUST NOT).

=== Trust-free unconfirmed transaction dependency chain ===

세그윗은 트랜잭션 가변성 문제를 근본적으로 해결하여 신뢰가 필요 없는(trust-free) 방식으로 미확인 트랜잭션 종속성 체인을 구축할 수 있습니다.

앨리스와 밥이라는 두 당사자는 2-of-2 다중서명 출력("펀딩 트랜잭션")에 일정량의 비트코인을 전송하는 데 동의할 수 있습니다. 펀딩 트랜잭션에 서명하지 않고 미래에 시간 제한이 있는 또 다른 트랜잭션을 생성하여 2-of-2 다중서명 출력을 제3의 계정으로 지출할 수 있습니다("지출 트랜잭션(spending transaction)"). 앨리스와 밥은 지출 트랜잭션에 서명하고 서명을 교환합니다.서명을 검토한 후 펀딩 트랜잭션에 서명 하고 블록체인에 커밋합니다. 추가 조치가 없으면 잠금 시간이 지나면 지출 트랜잭션이 확정되고 원래 계약에 따라 자금이 릴리즈됩니다. 또한 잠금 시간 전에 잠금 시간이 더 짧은 다른 지출 트랜잭션을 통해 원래 계약을 취소할 수 있는 유연성을 유지하되, 양 당사자의 상호 동의가 있는 경우에만 가능합니다.

양 당사자가 먼저 펀딩 트랜잭션에 서명하지 않으면 지출 트랜잭션을 생성할 수 없기 때문에 BIP62의 가변성 수정으로 이러한 설정은 불가능합니다. 앨리스가 밥보다 먼저 펀딩 거래 서명을 공개하면 밥은 지출 거래에 서명하지 않고도 펀딩을 무기한 동결할 수 있습니다.

미확인 거래 의존성 체인은 양방향(duplex) 소액 결제 채널과 라이트닝 네트워크와 같은 보다 정교한 결제 네트워크의 기본 구성 요소로, 비트코인 시스템의 확장성과 효율성을 크게 향상시킬 수 있는 잠재력을 가지고 있습니다.

== Future extensions ==

=== Compact fraud proof for SPV nodes ===

Bitcoin right now only has two real security models. A user either runs a full-node which validates every block with all rules in the system, or a SPV (Simple Payment Verification) client which only validates the headers as a proof of publication of some transactions. The Bitcoin whitepaper suggested that SPV nodes may accept alerts from full nodes when they detect an invalid block, prompting the SPV node to download the questioned blocks and transactions for validation. This approach, however, could become a DoS attack vector as there is virtually no cost to generate a false alarm. An alarm must come with a compact, yet deterministic fraud proof.

In the current Bitcoin protocol, it is possible to generate compact fraud proof for almost all rules except a few:

# It is not possible to prove a miner has introduced too many Bitcoins in the coinbase transaction outputs without showing the whole block itself and all input transactions.
# It is not possible to prove the violation of any block specific constraints, such as size and sigop limits, without showing the whole block (and all input transactions in the case of sigop limit)
# It is not possible to prove the spending of a non-existing input without showing all transaction IDs in the blockchain way back to the genesis block.

Extra witness data can be committed that allows short proofs of block invalidity that SPV nodes can quickly verify:

# Sum trees for transaction fee can be committed making it possible to construct short proofs that the miner does not add excessive fees to the coinbase transaction. Similar for the block size and sigop count limit.
# Backlinks for the outputs spent by the transaction's inputs can be provided. These backlinks consist of a block hash and an offset that thin clients can easily query and check to verify that the outputs exist.

These commitments could be included in the extensible commitment structure through a soft fork and will be transparent to nodes that do not understand such new rules.

=== New script system ===

Since a version byte is pushed before a witness program, and programs with unknown versions are always considered as anyone-can-spend script, it is possible to introduce any new script system with a soft fork. The witness as a structure is not restricted by any existing script semantics and constraints, the 520-byte push limit in particular, and therefore allows arbitrarily large scripts and signatures.

Examples of new script system include Schnorr signatures which reduce the size of multisig transactions dramatically, Lamport signature which is quantum computing resistance, and Merklized abstract syntax trees which allow very compact witness for conditional scripts with extreme complexity.

=== Per-input lock-time and relative-lock-time ===

Currently there is only one nLockTime field in a transaction and all inputs must share the same value. [https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki BIP68] enables per-input relative-lock-time using the nSequence field, however, with a limited lock-time period and resolution.

With a soft fork, it is possible to introduce a separate witness structure to allow per-input lock-time and relative-lock-time, and a new script system that could sign and manipulate the new data (like [https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki BIP65] and [https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki BIP112]).

== Backward compatibility ==

As a soft fork, older software will continue to operate without modification.  Non-upgraded nodes, however, will not see nor validate the witness data and will consider all witness programs as anyone-can-spend scripts (except a few edge cases where the witness programs are equal to 0, which the script must fail). Wallets should always be wary of anyone-can-spend scripts and treat them with suspicion. Non-upgraded nodes are strongly encouraged to upgrade in order to take advantage of the new features.

'''What a non-upgraded wallet can do'''

* Receiving bitcoin from non-upgraded and upgraded wallets
* Sending bitcoin to non-upgraded and upgraded wallets with traditional P2PKH address (without any benefit of segregated witness)
* Sending bitcoin to upgraded wallets using a P2SH address
* Sending bitcoin to upgraded wallets using a native witness program through [https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki BIP70] payment protocol

'''What a non-upgraded wallet cannot do'''

* Validating segregated witness transaction. It assumes such a transaction is always valid

== Deployment ==

This BIP will be deployed by "version bits" BIP9 with the name "segwit" and using bit 1.

For Bitcoin mainnet, the BIP9 starttime will be midnight 15 november 2016 UTC (Epoch timestamp 1479168000) and BIP9 timeout will be midnight 15 november 2017 UTC (Epoch timestamp 1510704000).

For Bitcoin testnet, the BIP9 starttime will be midnight 1 May 2016 UTC (Epoch timestamp 1462060800) and BIP9 timeout will be midnight 1 May 2017 UTC (Epoch timestamp 1493596800).

== Credits ==

Special thanks to Gregory Maxwell for originating many of the ideas in this BIP and Luke-Jr for figuring out how to deploy this as a soft fork.

== Footnotes ==

<references />

== Reference Implementation ==

https://github.com/bitcoin/bitcoin/pull/8149

== References ==

*[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]
*[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for Version 0 Witness Program]]
*[[bip-0144.mediawiki|BIP144 Segregated Witness (Peer Services)]]
*[[bip-0173.mediawiki|BIP173 Base32 address format for native v0-16 witness outputs]]

== Copyright ==

This document is placed in the public domain.
