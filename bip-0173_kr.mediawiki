<pre>
  BIP: 173
  레이어: 어플리케이션
  제목: v0-16 네이티브 증인 출력에 대한 Base32 주소 형식
  저자: Pieter Wuille <pieter.wuille@gmail.com>
          Greg Maxwell <greg@xiph.org>
  코멘트 요약: No comments yet.
  코멘트-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0173
  상태: Final
  타입: Informational
  생성일: 2017-03-20
  라이센스: BSD-2-Clause
  대체: 142
</pre>

==Introduction==

===Abstract===

이 문서는 체크섬이 포함된 base32 형식 "Bech32"와 이를 사용하여 네이티브 세그윗 출력 주소의 표준을 제안합니다.

===Copyright===

이 BIP는 2-clause BSD 라이센스에 따라 라이센스가 부여됩니다.

===Motivation===

비트코인의 대부분의 역사에서, 비트코인은 끝이 잘려진 이중 SHA256 체크섬을 사용하는 base58 주소를 사용해 왔습니다. 이들은 원래 소프트웨어의 일부였으며 [https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki BIP13] 에서 Pay-to-script-hash ([https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki P2SH])를 위해 범위가 확장되었습니다.
그러나 문자 집합과 체크섬 알고리즘 모두 제한이 있습니다.
* Base58는 ''알파벳-숫자 모드(alphanumeric mode)''를 사용할 수 없기 때문에 QR 코드에서 많은 공간을 차지합니다.
* Base58에서의 대소문자 혼합은 정확하게 적기, 모바일 키보드에서 입력하기, 혹은 소리 내어 읽기에 불편합니다.
* 이중 SHA256 체크섬은 느리며 오류 검출 보장이 안 됩니다.
* 오류 감지 코드에 대한 대부분의 연구는 (58이 아닌) [https://en.wikipedia.org/wiki/Prime_power 소수 거듭제곱(prime power)]인 문자 집합 크기에 적용되기 때문에, 이 경우에는 적용할 수 없습니다.
* Base58 디코딩은 복잡하고 비교적 느립니다.

세그윗 제안에는 새로운 클래스의 출력(증인 프로그램, [https://github.com/MyLifeForB/bips/blob/master/bip-0141_kr.mediawiki BIP141] 참조)과 그것의 두 인스턴스("P2WPKH"와 "P2WSH", [https://github.com/MyLifeForB/bips/blob/master/bip-0143_kr.mediawiki BIP143] 참조)가 포함됩니다. 이들의 기능은 P2SH 출력에 포함되어 구현이 가능하지만, 최적의 효율성과 보안을 위해서는 세그윗을 직접 사용하는 것이 좋습니다. 이 문서에서는 네이티브 증인 출력에 대한 새로운 주소 형식을 제안합니다(현재 및 미래 버전 모두).

이는 [https://github.com/bitcoin/bips/blob/master/bip-0142.mediawiki BIP142]를 대체하며, 이전에 [https://bitcoincore.org/logs/2016-05-zurich-meeting-notes.html#base32 여기]에서 논의되었습니다([https://bitcoincore.org/en/meetings/2016/05/20/#error-correcting-codes-for-future-address-types 여기]에 요약되어있습니다).

===Examples===

모든 예제는 공개키 <tt>0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</tt>를 사용합니다. P2WSH 예제에서는 스크립트로 <tt>key OP_CHECKSIG</tt>를 사용합니다.

* 메인넷 P2WPKH: <tt>bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4</tt>
* 테스트넷 P2WPKH: <tt>tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx</tt>
* 메인넷 P2WSH: <tt>bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3</tt>
* 테스트넷 P2WSH: <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7</tt>

==Specification==

우선 일반적인 체크섬이 있는 base32<ref>'''도대체 왜 base32를 사용하는 것인가요?''' 대소문자를 혼용하지 않아서 읽기 쉽고 QR 코드에 넣기 쉬워진다는 점입니다. 길이가 15% 증가하지만, 복사, 붙여넣기할 때는 문제가 되지 않습니다.</ref> 포맷인 ''Bech32''를 설명한 후, 이를 사용하여 세그윗 주소를 정의합니다.

===Bech32===

Bech32<ref>'''왜 Bech32라고 부르나요?''' "는 BCH(사용된 오류 검출 알고리즘) 문자를 포함하며 "base"와 비슷한 소리가 나기 때문입니다.</ref> 문자열은 최대 90자 이하이며 다음과 같이 구성됩니다:
* '''인간이-읽을-수-있는 파트(human-readable part)'''으로, 데이터의 유형이나 읽는 사람에게 관련이 있는 내용을 전달하기 위해 사용됩니다. 이 부분은 1~83개의 US-ASCII 문자로 이루어져 있으며, 각 문자는 [33-126] 범위의 값을 가지고 있어야 합니다. HRP 유효성은 특정 응용 프로그램에서 더 제한될 수 있습니다.
* '''구분자(separator)'''는 항상 "1"입니다. 만약 "1"이 인간이-읽을-수-있는 파트 안에 허용된다면, 마지막에 있는 것이 구분자입니다.<ref>'''왜 주소에 구분자가 포함되나요?''' 이렇게 함으로써, 인간이-읽을-수-있는 파트와 데이터 부분이 명확하게 구분되어, 동일한 접두사를 공유하는 다른 인간이-읽을-수-있는 파트와 충돌할 가능성을 피할 수 있습니다. 인간이-읽을-수-있는 파트에 문자 집합 제한을 피할 수 있습니다. 구분 기호는 ''1''로 선택되었는데, 이는 비알파벳-숫자(non-alphanumeric)' 문자를 사용하면 주소 복사 붙여넣기 작업이 복잡해지기 때문입니다(일부 애플리케이션에서는 더블 클릭 선택이 불가능합니다). 따라서 일반 문자 집합 외의 알파벳-숫자 문자가 선택되었습니다.</ref>.
* '''데이터 파트(data part)'''는 적어도 6자 이상이며, "1", "b", "i", "o"를 제외한 알파벳 대소문자와 숫자로만 구성됩니다.<ref>'''왜 [http://www.faqs.org/rfcs/rfc3548.html RFC3548] 또는 [https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt z-base-32]와 같은 기존 문자 집합을 사용하지 않는 것일까요?'''
이 문자 집합은 [https://hissa.nist.gov/~black/GTLD/ 이런] 시각적 유사성 데이터에 따라 모호성을 최소화하기 위해 선택되었으며, 순서는 (동일한 데이터에 따라) 1 비트 이상 차이나는 유사한 문자 쌍의 수를 최소화하기 위해 선택되었습니다. 체크섬은 비트 오류의 수가 적을 때 감지 능력을 극대화하기 위해 선택되므로, 이 선택은 일부 오류 모델에서의 성능을 향상시킵니다.</ref>.


{| class="wikitable"
|-
!
!0
!1
!2
!3
!4
!5
!6
!7
|-
!+0
|q||p||z||r||y||9||x||8
|-
!+8
|g||f||2||t||v||d||w||0
|-
!+16
|s||3||j||n||5||4||k||h
|-
!+24
|c||e||6||m||u||a||7||l
|}


'''Checksum'''

데이터 부분의 마지막 6개 문자는 체크섬을 형성하며 어떠한 정보도 포함하지 않습니다. 유효한 문자열은 아래의 Python3 코드 스니펫에서 명시된 유효성 기준을 충족해야 합니다. <tt>bech32_verify_checksum</tt> 함수는 다음과 같은 인수를 받았을 때 참을 반환해야 합니다:
* <tt>hrp</tt>: 문자열로 된 인간이-읽을-수-있는 파트
* <tt>data</tt>: 위의 표를 사용하여 변환한 후 문자열을 나타내는 정수 목록으로 나타낸 데이터 부분

<pre>
def bech32_polymod(values):
  GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]
  chk = 1
  for v in values:
    b = (chk >> 25)
    chk = (chk & 0x1ffffff) << 5 ^ v
    for i in range(5):
      chk ^= GEN[i] if ((b >> i) & 1) else 0
  return chk

def bech32_hrp_expand(s):
  return [ord(x) >> 5 for x in s] + [0] + [ord(x) & 31 for x in s]

def bech32_verify_checksum(hrp, data):
  return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1
</pre>

이 코드는 '''최대 4개 문자에 영향을 미치는 어떤 오류'''든 감지할 수 있는 [https://en.wikipedia.org/wiki/BCH_code BCH code]를 구현하며, 추가적인 오류를 감지하지 못할 확률이 10억 분의 1 미만입니다. 더 많은 세부 정보는 부록-Checksum Design에서 확인할 수 있습니다. 인간이-읽을-수-있는 파트는 각 문자의 US-ASCII 값을 상위 비트로 사용하여 체크섬 계산에 먼저 입력한 다음 0을 더한 다음 각 문자의 하위 비트를 입력하여 처리됩니다<ref>'''왜 인간이-읽을-수-있는 파트의 상위 비트를 먼저 처리하나요?'''
이로 인해 실제로 체크섬이 계산되는 데이터는 ''[high hrp] 0 [low hrp] [data]'' 가 됩니다.
이는 인간이-읽을-수-있는 파트의 오류가 알파벳 문자를 다른 문자로 변경하는 것과 같이 하위 5비트만 변경되는 것으로 가정하면, 오류는 최대 89자인 ''[low hrp] [data]'' 부분으로 제한되며, 따라서 모든 오류 감지 속성(부록 참조)이 적용됨을 의미합니다.</ref>.

인간이-읽을-수-있는 파트와 (체크섬이 아닌) 데이터 파트의 값이 주어졌을 때 유효한 체크섬을 구성하려면 아래의 코드를 사용할 수 있습니다.

<pre>
def bech32_create_checksum(hrp, data):
  values = bech32_hrp_expand(hrp) + data
  polymod = bech32_polymod(values + [0,0,0,0,0,0]) ^ 1
  return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]
</pre>

'''Error correction'''

BCH 코드의 특징 중 하나는 오류 정정에 사용할 수 있다는 것입니다. 오류 정정의 불행한 부작용 중 하나는 오류 검출 기능이 약화된다는 것입니다: 정정은 유효하지 않은(invalid) 입력을 유효한(valid) 입력으로 바꿀 수 있지만, 여러 개의 에러가 발생한 경우 유효한(valid) 입력이 정확한(correct) 입력이 아닐 수 있습니다. 잘못된(incorrect) 그러나 유효한 입력을 사용하면 자금이 복구할 수 없이 손실될 수 있습니다. 이러한 이유로, 구현체는 올바르지 않은 입력을 수정하는 기능을 구현하지 말아야 합니다(SHOULD NOT). 최대한 오류가 발생한 위치를 사용자에게 제시할 수는 있지만, 수정할 값을 제시해서는 안 됩니다.

'''Uppercase/lowercase'''

The lowercase form is used when determining a character's value for checksum purposes.

Encoders MUST always output an all lowercase Bech32 string.
If an uppercase version of the encoding result is desired, (e.g.- for presentation purposes, or QR code use),
then an uppercasing procedure can be performed external to the encoding process.

Decoders MUST NOT accept strings where some characters are uppercase and some are lowercase (such strings are referred to as mixed case strings).

For presentation, lowercase is usually preferable, but inside QR codes uppercase SHOULD be used, as those permit the use of
''[http://www.thonky.com/qr-code-tutorial/alphanumeric-mode-encoding alphanumeric mode]'', which is 45% more compact than the normal
''[http://www.thonky.com/qr-code-tutorial/byte-mode-encoding byte mode]''.

===Segwit address format===

A segwit address<ref>'''Why not make an address format that is generic for all scriptPubKeys?'''
That would lead to confusion about addresses for
existing scriptPubKey types. Furthermore, if addresses that do not have a one-to-one mapping with scriptPubKeys (such as ECDH-based
addresses) are ever introduced, having a fully generic old address type available would
permit reinterpreting the resulting scriptPubKeys using the old address
format, with lost funds as a result if bitcoins are sent to them.</ref> is a Bech32 encoding of:

* The human-readable part "bc"<ref>'''Why use 'bc' as human-readable part and not 'btc'?''' 'bc' is shorter.</ref> for mainnet, and "tb"<ref>'''Why use 'tb' as human-readable part for testnet?''' It was chosen to
be of the same length as the mainnet counterpart (to simplify
implementations' assumptions about lengths), but still be visually
distinct.</ref> for testnet.
* The data-part values:
** 1 character (representing 5 bits of data): the witness version
** A conversion of the 2-to-40-byte witness program (as defined by [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]) to base32:
*** Start with the bits of the witness program, most significant bit per byte first.
*** Re-arrange those bits into groups of 5, and pad with zeroes at the end if needed.
*** Translate those bits to characters using the table above.

'''Decoding'''

Software interpreting a segwit address:
* MUST verify that the human-readable part is "bc" for mainnet and "tb" for testnet.
* MUST verify that the first decoded data value (the witness version) is between 0 and 16, inclusive.
* Convert the rest of the data to bytes:
** Translate the values to 5 bits, most significant bit first.
** Re-arrange those bits into groups of 8 bits. Any incomplete group at the end MUST be 4 bits or less, MUST be all zeroes, and is discarded.
** There MUST be between 2 and 40 groups, which are interpreted as the bytes of the witness program.

Decoders SHOULD enforce known-length restrictions on witness programs.
For example, BIP141 specifies ''If the version byte is 0, but the witness
program is neither 20 nor 32 bytes, the script must fail.''

As a result of the previous rules, addresses are always between 14 and 74 characters long, and their length modulo 8 cannot be 0, 3, or 5.
Version 0 witness addresses are always 42 or 62 characters, but implementations MUST allow the use of any version.

Implementations should take special care when converting the address to a
scriptPubkey, where witness version ''n'' is stored as ''OP_n''. OP_0 is
encoded as 0x00, but OP_1 through OP_16 are encoded as 0x51 though 0x60
(81 to 96 in decimal). If a bech32 address is converted to an incorrect
scriptPubKey the result will likely be either unspendable or insecure.

===Compatibility===

Only new software will be able to use these addresses, and only for
receivers with segwit-enabled new software. In all other cases, P2SH or
P2PKH addresses can be used.

==Rationale==

<references />

==Reference implementations==

* Reference encoder and decoder:
** [https://github.com/sipa/bech32/tree/master/ref/c For C]
** [https://github.com/sipa/bech32/tree/master/ref/c++ For C++]
** [https://github.com/sipa/bech32/tree/master/ref/javascript For JavaScript]
** [https://github.com/sipa/bech32/tree/master/ref/go For Go]
** [https://github.com/sipa/bech32/tree/master/ref/python For Python]
** [https://github.com/sipa/bech32/tree/master/ref/haskell For Haskell]
** [https://github.com/sipa/bech32/tree/master/ref/ruby For Ruby]
** [https://github.com/sipa/bech32/tree/master/ref/rust For Rust]

* Fancy decoder that localizes errors:
** [https://github.com/sipa/bech32/tree/master/ecc/javascript For JavaScript] ([http://bitcoin.sipa.be/bech32/demo/demo.html demo website])

==Registered Human-readable Prefixes==

SatoshiLabs maintains a full list of registered human-readable parts for other cryptocurrencies:

[https://github.com/satoshilabs/slips/blob/master/slip-0173.md SLIP-0173 : Registered human-readable parts for BIP-0173]

==Appendices==

===Test vectors===

The following strings are valid Bech32:
* <tt>A12UEL5L</tt>
* <tt>a12uel5l</tt>
* <tt>an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs</tt>
* <tt>abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw</tt>
* <tt>11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j</tt>
* <tt>split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w</tt>
* <tt>?1ezyfcl</tt> WARNING: During conversion to US-ASCII some encoders may set unmappable characters to a valid US-ASCII character, such as '?'. For example:

<pre>
>>> bech32_encode('\x80'.encode('ascii', 'replace').decode('ascii'), [])
'?1ezyfcl'
</pre>

The following string are not valid Bech32 (with reason for invalidity):
* 0x20 + <tt>1nwldj5</tt>: HRP character out of range
* 0x7F + <tt>1axkwrx</tt>: HRP character out of range
* 0x80 + <tt>1eym55h</tt>: HRP character out of range
* <tt>an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx</tt>: overall max length exceeded
* <tt>pzry9x0s0muk</tt>: No separator character
* <tt>1pzry9x0s0muk</tt>: Empty HRP
* <tt>x1b4n0q5v</tt>: Invalid data character
* <tt>li1dgmt3</tt>: Too short checksum
* <tt>de1lg7wt</tt> + 0xFF: Invalid character in checksum
* <tt>A1G7SGD8</tt>: checksum calculated with uppercase form of HRP
* <tt>10a06t8</tt>: empty HRP
* <tt>1qzzfhee</tt>: empty HRP

The following list gives valid segwit addresses and the scriptPubKey that they
translate to in hex.
* <tt>BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4</tt>: <tt>0014751e76e8199196d454941c45d1b3a323f1433bd6</tt>
* <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7</tt>: <tt>00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262</tt>
* <tt>bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx</tt>: <tt>5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6</tt>
* <tt>BC1SW50QA3JX3S</tt>: <tt>6002751e</tt>
* <tt>bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj</tt>: <tt>5210751e76e8199196d454941c45d1b3a323</tt>
* <tt>tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy</tt>: <tt>0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433</tt>

The following list gives invalid segwit addresses and the reason for
their invalidity.
* <tt>tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty</tt>: Invalid human-readable part
* <tt>bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5</tt>: Invalid checksum
* <tt>BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2</tt>: Invalid witness version
* <tt>bc1rw5uspcuh</tt>: Invalid program length
* <tt>bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90</tt>: Invalid program length
* <tt>BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P</tt>: Invalid program length for witness version 0 (per BIP141)
* <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7</tt>: Mixed case
* <tt>bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du</tt>: zero padding of more than 4 bits
* <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv</tt>: Non-zero padding in 8-to-5 conversion
* <tt>bc1gmk9yu</tt>: Empty data section

===Checksum design===

'''Design choices'''

BCH codes can be constructed over any prime-power alphabet and can be chosen to have a good trade-off between
size and error-detection capabilities. While most work around BCH codes uses a binary alphabet, that is not a requirement.
This makes them more appropriate for our use case than [https://en.wikipedia.org/wiki/Cyclic_redundancy_check CRC codes]. Unlike
[https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction Reed-Solomon codes],
they are not restricted in length to one less than the alphabet size. While they also support efficient error correction,
the implementation of just error detection is very simple.

We pick 6 checksum characters as a trade-off between length of the addresses and the error-detection capabilities, as 6
characters is the lowest number sufficient for a random failure chance below 1 per billion. For the length of data
we're interested in protecting (up to 71 bytes for a potential future 40-byte witness
program), BCH codes can be constructed that guarantee detecting up to 4 errors.

'''Selected properties'''

Many of these codes perform badly when dealing with more errors than they are designed to detect, but not all.
For that reason, we consider codes that are designed to detect only 3 errors as well as 4 errors,
and analyse how well they perform in practice.

The specific code chosen here is the result
of:
* Starting with an exhaustive list of 159605 BCH codes designed to detect 3 or 4 errors up to length 93, 151, 165, 341, 1023, and 1057.
* From those, requiring the detection of 4 errors up to length 71, resulting in 28825 remaining codes.
* From those, choosing the codes with the best worst-case window for 5-character errors, resulting in 310 remaining codes.
* From those, picking the code with the lowest chance for not detecting small numbers of ''bit'' errors.

As a naive search would require over 6.5 * 10<sup>19</sup> checksum evaluations, a collision-search approach was used for
analysis. The code can be found [https://github.com/sipa/ezbase32/ here].

'''Properties'''

The following table summarizes the chances for detection failure (as
multiples of 1 in 10<sup>9</sup>).

{| class="wikitable"
|-
!colspan="2" | Window length
!colspan="6" | Number of wrong characters
|-
!Length
!Description
!≤4
!5
!6
!7
!8
!≥9
|-
| 8 || Longest detecting 6 errors || colspan="3" | 0 || 1.127 || 0.909 || n/a
|-
| 18 || Longest detecting 5 errors || colspan="2" | 0 || 0.965 || 0.929 || 0.932 || 0.931
|-
| 19 || Worst case for 6 errors || 0 || 0.093 || 0.972 || 0.928 || colspan="2" | 0.931
|-
| 39 ||  Length for a P2WPKH address || 0 || 0.756 || 0.935 || 0.932 || colspan="2" | 0.931
|-
| 59 || Length for a P2WSH address || 0 || 0.805 || 0.933 || colspan="3" | 0.931
|-
| 71 || Length for a 40-byte program address || 0 || 0.830 || 0.934 || colspan="3" | 0.931
|-
| 89 || Longest detecting 4 errors || 0 || 0.867 || 0.933 || colspan="3" | 0.931
|}
This means that when 5 changed characters occur randomly distributed in
the 39 characters of a P2WPKH address, there is a chance of
''0.756 per billion'' that it will go undetected. When those 5 changes
occur randomly within a 19-character window, that chance goes down to
''0.093 per billion''. As the number of errors goes up, the chance
converges towards ''1 in 2<sup>30</sup>'' = ''0.931 per billion''.

Even though the chosen code performs reasonably well up to 1023 characters,
other designs are preferable for lengths above 89 characters (excluding the
separator).

==Acknowledgements==

This document is inspired by the [https://rusty.ozlabs.org/?p=578 address proposal] by Rusty Russell, the
[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-February/004402.html base32] proposal by Mark Friedenbach, and had input from Luke Dashjr,
Johnson Lau, Eric Lombrozo, Peter Todd, and various other reviewers.
